name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    env:
      AWS_REGION: "us-east-1"
      IMAGE_NAME: "my-web-app"
      INSTANCE_USER: "ec2-user"
      SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    steps:
      # 1. Checkout del CÃ³digo
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Configurar Credenciales de AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. Build de la Imagen Docker
      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:latest .

      # 4. Login en Docker Hub
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. Push de la Imagen Docker
      - name: Push Docker Image
        run: |
          docker tag $IMAGE_NAME:latest ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:latest

      # 6. Terraform Init
      - name: Initialize Terraform
        run: terraform init -input=false

      # 7. Terraform Validate
      - name: Terraform Validate
        run: terraform validate

      # 8. Terraform Plan
      - name: Terraform Plan
        run: terraform plan -var="docker_image=${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:latest"

      # 9. Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve -var="docker_image=${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:latest"

      # 10. Configurar e Iniciar Docker en EC2
      - name: Configure EC2 and Deploy Container
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key $INSTANCE_USER@<EC2_PUBLIC_IP> << EOF
          sudo docker stop $(sudo docker ps -q) || true
          sudo docker run -d -p 80:80 ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:latest
          EOF